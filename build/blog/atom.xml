<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wasmcloud.com/blog</id>
    <title>wasmCloud Blog</title>
    <updated>2022-10-18T13:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wasmcloud.com/blog"/>
    <subtitle>wasmCloud Blog</subtitle>
    <icon>https://wasmcloud.com/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Globally Distributed WebAssembly Applications with wasmCloud and NATS]]></title>
        <id>/globally_distributed_webassembly_applications_with_wasmcloud_and_nats</id>
        <link href="https://wasmcloud.com/blog/globally_distributed_webassembly_applications_with_wasmcloud_and_nats"/>
        <updated>2022-10-18T13:00:00.000Z</updated>
        <summary type="html"><![CDATA[Taking a wasmCloud lattice from local to globally distributed with NATS and NGS]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="ngs-global" src="/assets/images/ngs-global-16f3079f19b6b44694b379284e215b8f.png" width="1118" height="922" class="img_ev3q"></p><p>The first claim we make about wasmCloud on our documentation site is: "wasmCloud is a distributed platform..." The best definition I could find, on <a href="https://en.wikipedia.org/wiki/Distributed_computing" target="_blank" rel="noopener noreferrer">Wikipedia</a> of course, is:</p><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p>Distributed computing is a field of computer science that studies distributed systems. A distributed system is a system whose components are located on different networked computers, which communicate and coordinate their actions by passing messages to one another from any system.</p></div></div><p>So, by the definition, as soon as we got two WebAssembly modules talking to each other on different networked computers we had a distributed system. Of course, we didn't stop there, and today we're going to walk through how you can run a global wasmCloud <a href="https://wasmcloud.dev/reference/lattice/" target="_blank" rel="noopener noreferrer">lattice</a> using NATS and NGS.</p><h1>How we got to NATS</h1><p>Back in the 0.18.0 days of wasmCloud we supported local host process calls which allowed developers to avoid installing NATS. Now, all wasmCloud hosts run atop NATS as a networking infrastructure that we call a <a href="https://wasmcloud.dev/reference/lattice/" target="_blank" rel="noopener noreferrer">lattice</a>. We've taken a stance <em>"compatible with, but not dependent upon"</em> for as much as possible (Kubernetes, Docker, bare metal, IoT, nomad) so this is a significant choice, and today you'll see the reasons why.</p><p>We're going to do a brief introduction on the power of NATS, talk about how wasmCloud uses it, and then get into configuring it to connect wasmCloud compute anywhere.</p><h1>NATS, Leaf Nodes, and NGS</h1><p><a href="https://nats.io/" target="_blank" rel="noopener noreferrer">NATS</a> describes itself as "Connective Technology for Adaptive Edge &amp; Distributed Systems", which does as good of a job as you can to describe such a far-reaching technology. At its base level, NATS enables pub-sub and request-reply messaging on <a href="https://docs.nats.io/nats-concepts/subjects" target="_blank" rel="noopener noreferrer">subjects</a>. You run the NATS server binary, then connect clients to it over a TCP socket <sup id="fnref-1-91159d"><a href="#fn-1-91159d" class="footnote-ref">1</a></sup> and can publish messages to any other client subscribed on a the same subject. NATS also includes an optional distributed persistence system called <a href="https://docs.nats.io/nats-concepts/jetstream" target="_blank" rel="noopener noreferrer">Jetstream</a> and a fully-featured authn/authz <a href="https://docs.nats.io/nats-concepts/security" target="_blank" rel="noopener noreferrer">security</a> system for additional reliability and configuration. There are plenty of features that NATS offers that are out of scope for this guide, but the NATS <a href="https://docs.nats.io/" target="_blank" rel="noopener noreferrer">documentation</a> is a great place to find those. To sum it up, when you adopt NATS, you dramatically simplify your architecture and the number of tools you need to worry about.</p><p>A <a href="https://docs.nats.io/running-a-nats-service/configuration/leafnodes" target="_blank" rel="noopener noreferrer">Leaf Node</a> <em>extends</em> a centralized NATS infrastructure with a local NATS server, allowing you to perform additional authentication steps, route messages locally until they need to be delivered to the central infrastructure. This mechanism is not only efficient, it even allows messages to still flow during network disconnects by continuing to deliver messages locally without an upstream connection. We'll be using a Leaf Node today to extend <a href="https://synadia.com/ngs" target="_blank" rel="noopener noreferrer">NGS</a>, the NATS Global Service by <a href="https://synadia.com/" target="_blank" rel="noopener noreferrer">Synadia</a>, which is a NATS supercluster with connection points on the edge, providing low latency worldwide.</p><h1>wasmCloud and NATS</h1><p>wasmCloud uses NATS in a multitude of ways. To name a few:</p><ol><li>Request/reply messaging for remote procedure calls between actors and capability providers. Additionally this is used for the <a href="https://github.com/wasmCloud/control-interface-client/" target="_blank" rel="noopener noreferrer">control interface</a>, which allows for remote managing of actors, providers, and hosts via <a href="https://github.com/wasmCloud/wash" target="_blank" rel="noopener noreferrer">wash</a>.</li><li>Jetstream to persist link definitions and claims so that they are durable and automatically delivered to new wasmCloud hosts joining an existing lattice</li><li>Communication with a wasmCloud configuration service and the soon-to-come application deployment manager (<a href="https://github.com/wasmCloud/wadm" target="_blank" rel="noopener noreferrer">wadm</a>)</li></ol><h1>Gathering Prerequisites</h1><div class="theme-admonition theme-admonition-caution alert alert--warning admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_S0QG"><p>This post was updated on <strong>11 Oct 2022</strong> to include new conveniences like the <code>wash up</code> command. This requires at least <code>v0.12.0</code> and removes the need to install NATS or the wasmCloud host runtime manually.</p></div></div><p>This example requires a few prerequisites:</p><ul><li>The wasmCloud Shell, aka <code>wash</code>, from the wasmCloud <a href="https://wasmcloud.dev/overview/installation/" target="_blank" rel="noopener noreferrer">installation guide</a>. If you already have <code>wash</code> installed, use <code>wash --version</code> to ensure you have version <code>v0.12.0</code> or newer</li><li>NATS account credentials to access NGS (we'll walk through this below)</li></ul><p>We're also going to use a few files from the aptly named <a href="https://github.com/wasmCloud/examples/tree/main/ngs" target="_blank" rel="noopener noreferrer">ngs</a> folder in our examples repository to deploy a Wasm microservice (we call this an <a href="https://wasmcloud.dev/reference/host-runtime/actors/" target="_blank" rel="noopener noreferrer">actor</a>) that securely fetches a random image of a cat or a dog. Later on we're going to use some files in this folder, you can either clone this repository or just copy and paste as we go along.</p><p>To help illustrate the architecture of our application, take a look at this diagram:</p><p><img loading="lazy" src="/assets/images/excalidraw-676279f6db4b0661c4c9cf6fc122854f.png" width="4207" height="1990" class="img_ev3q"></p><p>We'll have wasmCloud running both locally and in the cloud (or just on another machine), and we'll be spreading compute across these two wasmCloud hosts. Don't worry, you won't have to look up your local IP address or expose any ports, NATS makes distributed computing a breeze.</p><p>The first step will be to get yourself a set of NGS credentials. Navigate to <a href="https://app.ngs.global" target="_blank" rel="noopener noreferrer">https://app.ngs.global</a> and select "Try It Out" under <strong>Free</strong>.
<img loading="lazy" src="/assets/images/ngs-signup-31643717aa5659550bcfc0893db2427f.png" width="2776" height="1914" class="img_ev3q"></p><p>For simplicity, go ahead and name this account <code>wasmcloud</code> to keep it separate from any other NATS accounts you may create in the future.</p><p><img loading="lazy" src="/assets/images/ngs-account-0a7b46f21589b1c936418a2b234f60e8.png" width="2696" height="1046" class="img_ev3q"></p><p>Proceed through the dialogues to sign in through your email until you reach the <code>Subscription Successful</code> page (keep in mind this is completely free, and you can't accidentally exceed your free tier limits). The last step in this process is to copy the <code>curl</code> command with your secret account key to install the NATS CLI and <code>nsc</code> to download your NGS credentials</p><p><img loading="lazy" src="/assets/images/ngs-curl-f0e3a3bf6e5f2d696c4c5d7dd19531c0.png" width="2656" height="784" class="img_ev3q"></p><div class="theme-admonition theme-admonition-caution alert alert--warning admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_S0QG"><p>The 58 character key starting with <code>SA</code> is a secret (S) key for an account (A). You'll want to avoid sharing this value on Twitter or anywhere else public.</p></div></div><p>Head back to your terminal and paste in that <code>curl</code> command. You'll see some output regarding the NATS install process, but all you really need is the last couple of lines:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">NATS Configuration Context </span><span class="token string" style="color:#e3116c">"synadia_wasmcloud_default"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Description: synadia </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Synadia Communications Inc.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Server URLs: tls://connect.ngs.global</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Credentials: /Users/brooks/.nkeys/creds/synadia/wasmcloud/default.creds </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">OK</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             Path: /Users/brooks/.config/nats/context/synadia_wasmcloud_default.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nats-install: All set</span><span class="token operator" style="color:#393A34">!</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You can see here where the <code>Credentials</code> file is stored, that's what you'll use to authenticate to NGS. Keep this path in mind as we'll come back to it. You can do a quick request through the <code>nats</code> CLI to see that it's all working:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ nats req ngs.echo </span><span class="token string" style="color:#e3116c">'Anyone out there?'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">11</span><span class="token plain">:30:10 Sending request on </span><span class="token string" style="color:#e3116c">"ngs.echo"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">11</span><span class="token plain">:30:10 Received with rtt </span><span class="token number" style="color:#36acaa">21</span><span class="token plain">.005416ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Ohio, US</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">: </span><span class="token string" style="color:#e3116c">"Anyone out there?"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h1>Running DogsAndCats on your Local Machine</h1><p>Now that you have walked through the wasmCloud installation guide and have valid NGS credentials, we're ready to take wasmCloud global!</p><p>To start, let's get NATS, wasmCloud, and the DogsAndCats example running on our local machine. This is what you can think of as the local development setup for wasmCloud but instead of using a standalone NATS server we'll be using a leaf node that connects to NGS.</p><p>Go ahead and locate the <code>Credentials</code> file that you saw in the NGS install output to that directory as well. If you named your account <code>wasmcloud</code> like above, then it will be located under a folder called <code>.nkeys</code> in your <strong>HOME</strong> directory.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> ~/.nkeys/creds/synadia/wasmcloud/default.creds</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----BEGIN NATS </span><span class="token environment constant" style="color:#36acaa">USER</span><span class="token plain"> JWT-----</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">eyJ0</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.elided</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">------END NATS </span><span class="token environment constant" style="color:#36acaa">USER</span><span class="token plain"> JWT------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">************************* IMPORTANT *************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NKEY Seed printed below can be used to sign and prove identity.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NKEYs are sensitive and should be treated as secrets.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----BEGIN </span><span class="token environment constant" style="color:#36acaa">USER</span><span class="token plain"> NKEY SEED-----</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SU</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.elided</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">------END </span><span class="token environment constant" style="color:#36acaa">USER</span><span class="token plain"> NKEY SEED------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">*************************************************************</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Here, we'll use <code>wash up</code> to launch a NATS leaf node connected over TLS to NGS and a wasmCloud host connected to that leaf node. We're going to use the account credentials you just generated to authenticate, and the wasmCloud logs will print directly to the terminal. To do so, we can specify the NGS address as the remote URL and your account credentials as the NATS credsfile:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wash up --nats-remote-url tls://connect.ngs.global --nats-credsfile ~/.nkeys/creds/synadia/wasmcloud/default.creds</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You should see output like the following:</p><div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">🏃 Running in interactive mode, your host is running at http://localhost:4000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">🚪 Press `CTRL+c` at any time to exit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11:37:41.559 [info] Wrote "./host_config.json"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11:37:41.560 [info] Wrote "/Users/brooks/.wash/host_config.json"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11:37:41.560 [info] Connecting to control interface NATS without authentication</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11:37:41.560 [info] Connecting to lattice rpc NATS without authentication</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11:37:41.560 [info] Host NATWVDH3WZHYQQG3GFXPGRW5IAF5O4YCTMZ66LIM2WRSIVRDOTMIWN5Y (morning-moon-3881) started.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11:37:41.560 [info] Valid cluster signers: CD263EGQIG4DKCZAYV6ZMDAX3LOV4PKEGNCZF2THIYONC7W4CAXELVZZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11:37:41.560 [warning] WARNING. You are using an ad hoc generated cluster seed.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">For any other host or CLI tool to communicate with this host,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">you MUST copy the following seed key and use it as the value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">of the WASMCLOUD_CLUSTER_SEED environment variable:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SCAGI4US72YWQT6TAJBCK77XSOAJMWI5PCG5MICC3FWNRFQLHE53BEZIFU</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You must also ensure the following cluster signer is in the list of valid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">signers for any new host you start:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CD263EGQIG4DKCZAYV6ZMDAX3LOV4PKEGNCZF2THIYONC7W4CAXELVZZ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11:37:41.564 [info] Started wasmCloud OTP Host Runtime</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11:37:41.566 [info] Running WasmcloudHostWeb.Endpoint with cowboy 2.9.0 at 0.0.0.0:4000 (http)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11:37:41.567 [info] Access WasmcloudHostWeb.Endpoint at http://localhost:4000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11:37:41.665 [info] Lattice cache stream created or verified as existing (0 consumers).</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11:37:41.665 [info] Attempting to create ephemeral consumer (cache loader)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11:37:41.667 [info] Created ephemeral consumer for lattice cache loader</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>From this command output, go ahead and save your 58 character cluster seed starting with <strong>SC</strong> (it will be different than the seed in the sample output above). We're going to use it again later.</p><p>You now have a running wasmCloud host using NGS as the lattice infrastructure! Even though we're connected to NGS, our leaf node is smart enough to always route traffic locally if possible, saving the overhead of a remote network hop. This is key for enabling wasmCloud to function even if you lose connectivity to NGS briefly, all actors and providers on a host will continue as if nothing happened.</p><p>We can continue by deploying our ngs application from the examples repository which consists of: our DogsAndCats actor, a capability provider that implements the <code>wasmcloud:httpserver</code> contract and a capability provider that implements the <code>wasmcloud:httpclient</code> contract, both of which we provide as wasmCloud first-party providers but could be swapped to any other implementation at runtime.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wash ctl start actor wasmcloud.azurecr.io/dogs-and-cats:0.1.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wash ctl </span><span class="token function" style="color:#d73a49">link</span><span class="token plain"> put MCUCZ7KMLQBRRWAREIBQKTJ64MMQ5YKEGTCRGPPV47N4R72W2SU3EYMU VAG3QITQQ2ODAOWB5TTQSDJ53XK3SHBEIFNK4AYJ5RKAX2UNSCAPHA5M wasmcloud:httpserver </span><span class="token assign-left variable" style="color:#36acaa">ADDRESS</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0.0</span><span class="token plain">.0.0:8081</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wash ctl </span><span class="token function" style="color:#d73a49">link</span><span class="token plain"> put MCUCZ7KMLQBRRWAREIBQKTJ64MMQ5YKEGTCRGPPV47N4R72W2SU3EYMU VCCVLH4XWGI3SGARFNYKYT2A32SUYA2KVAIV2U2Q34DQA7WWJPFRKIKM wasmcloud:httpclient</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wash ctl start provider wasmcloud.azurecr.io/httpserver:0.15.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wash ctl start provider wasmcloud.azurecr.io/httpclient:0.4.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Once everything completes, check out a pet picture at <a href="http://127.0.0.1:8081" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8081</a>! You can refresh to your heart's desire to see pictures of cats and dogs, and you've deployed your application on wasmCloud.</p><h1>Turning the Knob from Local to Global</h1><p>For this step you're going to need another computer. This can be a Cloud VM, a Docker container, or even your friends laptop. The architecture can be x86_64 or aarch64, and the operating system can be Macos, Windows, or Linux. The instructions are all the same regardless of your choice (thanks WebAssembly!) For today, I chose to do this on a Google Cloud Platform e2 micro instance which is included in their <a href="https://cloud.google.com/free" target="_blank" rel="noopener noreferrer">free</a> tier.</p><p>You'll want to get terminal access to to your new machine and then follow the wasmCloud <a href="https://wasmcloud.dev/overview/installation/" target="_blank" rel="noopener noreferrer">installation guide</a> <code>wash</code> as you did before. You'll need a few pieces of information to ensure this host can properly join your lattice:</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="defaultcreds"><strong>default.creds</strong><a class="hash-link" href="#defaultcreds" title="Direct link to heading">​</a></h3><p>This is the same set of credentials you used in the previous step, located under <code>~/.nkeys/creds/synadia/wasmcloud/default.creds</code> if your account name is <code>wasmcloud</code>. The values contained inside of the credsfile can be supplied manually to connect, but for simplicity we recommend just copying it over to your second machine.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cluster-seed"><strong>Cluster Seed</strong><a class="hash-link" href="#cluster-seed" title="Direct link to heading">​</a></h3><p>wasmCloud uses a cluster seed to sign and verify each invocation (e.g. <code>HttpServer.HandleRequest</code>) in wasmCloud. This is a part of wasmCloud's <a href="https://wasmcloud.dev/app-dev/secure/clusterkeys/" target="_blank" rel="noopener noreferrer">zero-trust security model</a> and any invocations that aren't signed with a verified issuer (e.g. from an unknown host) will be denied before it even reaches the actor /&nbsp;provider. This can be found in the output of your <code>wash up</code> command that you ran earlier as the 58 character seed starting with <strong>SC</strong>.</p><p>Other than that, both hosts will use the default values from <code>wash up</code> like the JetStream domain (core) and lattice prefix (default). You can run the following command to launch your second host, which specifies a label, the cluster seed, and a separate JetStream domain for the <em>leaf node</em> to allow your locally launched host to remain as the "primary" node:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token assign-left variable" style="color:#36acaa">HOST_machine</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">second wash up --nats-remote-url tls://connect.ngs.global --nats-credsfile ./default.creds --cluster-seed SCAGI4US72YWQT6TAJBCK77XSOAJMWI5PCG5MICC3FWNRFQLHE53BEZIFU --nats-js-domain extender --wasmcloud-js-domain core</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You should see a similar dump of logs, but notably you should see that you are connecting to a stream with one consumer (your local machine)</p><div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">16:06:22.896 [info] Lattice cache stream created or verified as existing (1 consumers).</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And now, on your local machine, check out <a href="http://localhost:4000" target="_blank" rel="noopener noreferrer">http://localhost:4000</a>. You should see your DogsAndCats resources and additionally under your <strong>Host Info</strong> section you'll see two hosts:</p><p><img loading="lazy" src="/assets/images/dashboard-6519c170e4863ee456cc974a303b01ae.png" width="2514" height="1222" class="img_ev3q"></p><p>We can go ahead and schedule a few extra replicas of the DogsAndCats actor on the cloud host and an HTTPClient provider using <code>wash</code> or by using the dashboard. These commands can be run with <code>wash</code> on either machine, the result is the same!</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># The constraint flag ensures we start on a host with that label</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wash ctl start actor wasmcloud.azurecr.io/dogs-and-cats:0.1.0 --constraint </span><span class="token assign-left variable" style="color:#36acaa">machine</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">second</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wash ctl start provider wasmcloud.azurecr.io/httpclient:0.4.0 --constraint </span><span class="token assign-left variable" style="color:#36acaa">machine</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">second</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We've now transformed this app from running as a monolith to running distributed across two machines, with resources running both local and in the cloud. You can even remove the DogsAndCats actor from your local machine and everything will immediately failover to the cloud.</p><h1>Wrapping up</h1><p>In this guide we used NGS and NATS Leaf Nodes to connect two wasmCloud hosts; one running locally and one running in the cloud. This guide demonstrated how you can run multiple instances of actors and different capability providers <em>anywhere</em> and how you, the developer, don't need to change your business logic to make this happen. We're all about making our developer experience world-class, and that means zero code changes from local development to running across different clouds with highly distributed infrastructure. To drive this home, here's few things that you didn't have to deal with today: IP addresses, security group rules, load balancing requests, failover logic, NATS cluster setup, configuring TLS communications, and of course recompiling for different architectures /&nbsp;operating systems. All of those are taken care of by the NATS and wasmCloud.</p><p>We used the NGS free tier to simplify the infrastructure setup, though it's worth noting that NGS is not a required component of this architecture. You can replace NGS with any NATS <a href="https://docs.nats.io/running-a-nats-service/configuration/clustering" target="_blank" rel="noopener noreferrer">cluster</a> and the result is the same, there's no required cost to connect more than two hosts together.</p><p>If you'd like to see the next level of this NGS + Leaf Node setup with wasmCloud, check out <a href="https://www.youtube.com/watch?v=wjwKmq16shI" target="_blank" rel="noopener noreferrer">Disrupting the Downtime Continuum</a> the talk Taylor and I gave last KubeCon EU where we used these instructions with one more leaf node and demonstrated live fail over between clouds with wasmCloud.</p><p>We're looking forward to seeing what you can do with this guide! If you give this a try and do something awesome or need any assistance, join our community <a href="https://slack.wasmcloud.com/" target="_blank" rel="noopener noreferrer">Slack</a> or open an issue on our wasmCloud <a href="https://github.com/wasmCloud/wasmCloud" target="_blank" rel="noopener noreferrer">repository</a>.</p><div class="footnotes"><hr><ol><li id="fn-1-91159d">NATS also accepts <a href="https://docs.nats.io/nats-concepts/connectivity" target="_blank" rel="noopener noreferrer">connections</a> over TLS, WebSockets, and MQTT<a href="#fnref-1-91159d" class="footnote-backref">↩</a></li></ol></div>]]></content>
        <author>
            <name>Brooks Townsend</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using Capabilities to Decouple Non-Functional Requirements]]></title>
        <id>/balancing_nfr_coupling</id>
        <link href="https://wasmcloud.com/blog/balancing_nfr_coupling"/>
        <updated>2022-10-04T13:00:00.000Z</updated>
        <summary type="html"><![CDATA[A look at the motivation and design behind loosely coupling services for actors]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="train-coupling" src="/assets/images/train_coupling-f0d5f6fec53363b0f7bba4d819a7a1c1.jpg" width="1014" height="792" class="img_ev3q"></p><p>This post explores the motivation and design behind the loose coupling between our actors and capabilities.</p><p>Developers have a number of creeds to which we hold dear. Sometimes these show up as pattern and practice recommendations. Sometimes they appear in blog posts, conference talks, or streams. They can also appear indirectly via the code we write. One such creed is the tenet of <em>loose coupling</em>. Everything needs to be loosely coupled, because we all known and preach that tight coupling is objectively bad. Everyone seems to know this, but we rarely stop to think about <em>why</em>.</p><p>Before getting into the meat of this post, let's take a second to define <strong>non-functional requirements</strong>, often abbreviated as <strong>NFR</strong>s. The core, so-called "pure" functional part of our business logic defines the <strong><em>what</em></strong> of the application, while the NFRs define the <strong><em>how</em></strong>.</p><p>By way of example, let's examine the anatomy of a fairly commonplace microservice that you might see deployed in any enterprise in a cloud or on Kubernetes. This example service is a RESTful one that validates requests, reads and write bank account information from a data store, and responds accordingly with JSON payloads over HTTP. For this sample, we might have the following sets of functional and non-functional requirements.</p><p><strong>Functional Requirements</strong>:</p><ul><li>Allow for the creation, deletion, and update of a bank account</li><li>Allow for querying summaries of multiple accounts</li><li>Allow for querying details on a single account</li><li>Validate all requests according to business rules</li><li>Accept requests via HTTP</li></ul><p><strong>Non-Functional Requirements</strong>:</p><ul><li>Store account details information in Postgres</li><li>Store account summaries in an in-memory Redis cache</li><li>Emit logs to stdout</li><li>Run 2 instances of the service per availability zone</li><li>Secure access to the HTTP endpoint via reverse proxy</li><li>Emit open telemetry spans and traces</li><li>Support and expose a prometheus metrics endpoint</li><li>Use <em>(your favorite)</em> HTTP server library</li><li>Use <em>(your favorite)</em> SSL tools</li><li>Secure access to the service via bearer token</li></ul><p>The amount of work required is definitely skewed toward the NFR end of the scale. With most of today's traditional development tools and ecosystems, every deployment artifact bundles the solution to functional requirements with <em>just one</em> of the many solutions to the non-functional requirements <em>at build time</em>.</p><p>It's pretty routine for developers to build a service that only works with Redis, only works with Postgres, only supports one way of emitting traces and spans, only manages logs one way, only handles prometheus metrics one way, only secures things one way, ... <em>you get the idea</em>. We might have some clever abstractions in our library code, we might even deftly employ <a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/anti-corruption-layer" target="_blank" rel="noopener noreferrer">anti-corruption layers</a>, but in the end, <em>we own our dependencies</em>, and despite calling it a microservice, we're shipping a brittle monolith that only works against one rigid target environment.</p><p>Like everything in our line of work, there are <em>tradeoffs</em>. There are some advantages to making fixed architecture decisions once and codifying those decisions into the deployment artifact. This can often buy you rapid time to market and simplicity in some areas, while dramatically increasing complexity in others. The reverse is true as well, if everything is too flexible, too loosely coupled, then this mess may be too difficult to manage.</p><p><img loading="lazy" alt="Coupling Spectrum" src="/assets/images/coupling_spectrum-600af8d23b6af892e09e126dfaf14629.png" width="1085" height="292" class="img_ev3q"></p><p>As illustrated, there is a spectrum of coupling from utter and total tight coupling to free and unfettered, uncoupled design. On the far right, all of our components are stuck together, then crammed into a box and sealed. On the far left, we can end up with thousands of little tiny pieces that are so flexible that maintenance and discovery is a nightmare. Without me saying it, I bet you can imagine examples of current technologies that sit on either end of this spectrum.</p><p>What we want, rather than extremes, is the <em>right</em> balance. I want to write <em>just</em> the code that satisfies my functional requirements, and then let other aspects of my system take care of satisfying the NFRs. To satisfy the above example, I want to write code that utilizes <em>some</em> key-value store, <em>some</em> SQL database, <em>some</em> web server. I can then run that component against a test environment on my laptop, a medium-sized environment in the CI tests, and then massive scale when in production. More importantly, <em>while in production</em>, I can even change the deployment shape to suit changes in my user base, demand, load, etc.</p><p>When we separate the functional and non-functional requirements across specific <a href="https://en.wikipedia.org/wiki/Design_by_contract" target="_blank" rel="noopener noreferrer">contracts</a>, then we can hopefully achieve the right balance between coupling. You might look at the word <em>contract</em> here and think we're just going back to anti-corruption layers or abstraction libraries inside our code. The difference is subtle but vital: requiring that the thing that satisfies the contract <em>not be a part of your code</em> is the magic sauce that balances the coupling scales.</p><p>If we own our dependencies, and the implementation of a contract is <em>not</em> a tightly coupled dependency, then we can finally say that, as developers, we don't own the non-functional requirements. NFRs are still mandatory, still important, and still have to be dealt with. However, if our <em>unit of deployment</em> doesn't own them, then they are free to change, update, and move on their own cadence, <em>for their own reasons</em>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wasmcloud-nfrs-and-capabilities">wasmCloud, NFRs, and Capabilities<a class="hash-link" href="#wasmcloud-nfrs-and-capabilities" title="Direct link to heading">​</a></h2><p>All of this lead-up and background hopefully explains why wasmCloud has chosen the abstractions we've chosen. We know that if we write a microservice that requires access to an <strong>S3</strong> bucket, it's going to be a huge pain to work with locally (even with tools like <em>minio</em>). The functional requirements of my code are "store this data in a blob store". Why should we be forced to decide on S3 and then live with that decision for the lifetime of the component?</p><p>By implementing a contract like the one we have for <code>wasmcloud:blobstore</code>, and writing code against that contract, wasmCloud actors can interact with files on disk during the local developer iteration cycle, some other abstraction during automated tests, and then real S3 buckets in production. The important thing is that the code no longer owns the choice of S3, or the configuration thereof.</p><p>WebAssembly's enforced hard boundary between the guest and the host mandates that developers choose where their code ends and the host-provided functionality begins. By forcing us to draw this line for real rather than have this line be something that is either implicitly or accidentally drawn (and subsequently violated), we can actually turn this so-called limitation into an advantage and build highly composable, distributed components that have <em>just the right</em> amount of coupling with the components that satisfy their non-functional requirements.</p><p>To see how wasmCloud has leveraged this kind of NFR decoupling, check out our documentation on <a href="https://wasmcloud.dev/app-dev/std-caps/" target="_blank" rel="noopener noreferrer">capability providers</a>. For an example of us demonstrating hot-swapping between a file system and S3 live, at runtime, without a recompile or redeploy, check out this <a href="https://youtu.be/s_Y-ISP58qk?t=522" target="_blank" rel="noopener noreferrer">wasmCloud community meeting</a>.</p><p>Today wasmCloud uses the Smithy DSL to define and describe these contracts. When we started, we had to fend for ourselves when it came to contracts and code generation. Hopefully soon, when the <a href="/blog/webassembly_components_and_wasmcloud_actors_a_glimpse_of_the_future">component model</a> becomes more of a real thing, we'll be able to take our contracts and turn them into component specifications that will work in wasmCloud <em>or anywhere else</em> that supports components.</p><p><strong><em>That</em></strong> is the real pot of gold at the end of the rainbow, and the ultimate payoff for maintaining the right coupling balance.</p><hr><p><em>Cover Photo by Daniel Schwen - Own work, CC BY-SA 4.0, <a href="https://commons.wikimedia.org/w/index.php?curid=4784168" target="_blank" rel="noopener noreferrer">https://commons.wikimedia.org/w/index.php?curid=4784168</a></em></p>]]></content>
        <author>
            <name>Kevin Hoffman</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebAssembly and the Road to Ubiquity]]></title>
        <id>/road_to_ubiquity</id>
        <link href="https://wasmcloud.com/blog/road_to_ubiquity"/>
        <updated>2022-09-19T13:00:00.000Z</updated>
        <summary type="html"><![CDATA[A brief look down WebAssembly's road to ubiquity]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="sample-map" src="/assets/images/ij_map_sample-90af2ea0965ac11900902b81b26f0361.jpeg" width="1280" height="720" class="img_ev3q"></p><p>It may seem odd or counter-intuitive, but most of us within the WebAssembly community are eagerly awaiting the day that WebAssembly becomes <em>"boring"</em>. Choosing so-called boring technology is a good, safe bet for building production systems. Boring technology does what it's supposed to, it's easy to work with, it doesn't crash or break down, and has a simple developer experience. This is what we want WebAssembly to be: boring and <strong><em>ubiquitous</em></strong>.</p><p>Unfortunately, we're not there yet. WebAssembly is far from boring these days. Building a <code>.wasm</code> module involves a lot of bespoke tooling, knowledge (much of which is tribal or hard to discover), plugins, and extensions. The experience varies between languages, and, much to our chagrin, even operating systems. Worse, the experience also varies whether you're targeting a browser or not, despite our protests that the browser should never be treated as a "more equal" citizen in the Wasm community. Working in the WebAssembly ecosystem today involves a number of high-caliber footguns.</p><p>As we move forward along the road to ubiquity, speed bumps and friction points will be smoothed out and the high-drama of today will become the "boring" of tomorrow.</p><p>In the not-so-distant future, WebAssembly will cease to become an end goal and will instead become a simple implementation detail; a mere checkbox or command-line flag. Developers using Apple's Xcode tools will create a project and check a box indicating that they're targeting the build as a WebAssembly Component. VScode and other IDEs will have integrated support for components that expose their interfaces through the component model's <code>.wit</code> (or whatever it becomes next) definitions, so people will get full syntax highlighting and type checking when they create a component that relies upon another component. There will be dependency visualization tools showing the chain of required components. We will have public repositories, artifactory, and other repository vendors will all natively support storing, querying, and annotating WebAssembly modules.</p><p>Developers using wasmCloud or Cosmonic will simply choose features from the SDK, compile, and deploy—all while blissfully unaware of how much WebAssembly contributed to that flow.</p><p>In this (hopefully near) future, developers will have the luxury of choice at multiple levels: the <em>engine</em> level, the <em>specification</em> level, and the <em>application</em> level.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="engine-level-choice">Engine-Level Choice<a class="hash-link" href="#engine-level-choice" title="Direct link to heading">​</a></h2><p>At the <strong>engine</strong> level, as the name implies, developers can choose which low-level engine they want to use for their <code>wasm</code> modules. Think of this like picking the right tool from the tool chest; optimizing the choice of engine to your particular needs.</p><p>This engine could be optimized and focused on any number of targets or categories like small devices, the cloud, a browser, or other bespoke environments with highly tuned characteristics. In keeping with WebAssembly's portability promise, the choice of engine should never require a refactor, redesign, or even a recompilation.</p><p>In the current state of the world, we can (for the most part) pick and choose which engine we want based on features or size or performance optimizations. If we want to explore features from standards that haven't yet been ratified, then we'll want to use <a href="https://wasmtime.dev/" target="_blank" rel="noopener noreferrer">wasmtime</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="specification-level-choice">Specification-Level Choice<a class="hash-link" href="#specification-level-choice" title="Direct link to heading">​</a></h2><p>It seems likely that ultimately WASI will not be a single all-encompassing walled box of extras that developers get to use with their modules, but rather a grab-bag of opt-in choices to multiple standards like networking, cryptography, file system and OS access, video cards/GPUs, etc. It's also pretty likely that these opt-in specifications will be defined as components using the component model.</p><p>Developers wishing to take advantage of specific WASI features are going to have to make that choice at design time and this choice gets baked into their WebAssembly module. If a developer chooses to write to stdout via WebAssembly, this may require one component while publishing a message over a message broker topic would be yet another component.</p><p>WASI is also likely going to be used as a gap bridging device. People who want the portability of WebAssembly, have little interest in the component model, and still want their big legacy libraries to compile and work<sup id="fnref-1-206e3c"><a href="#fn-1-206e3c" class="footnote-ref">1</a></sup> properly will leverage WASI-aware compilers/linkers (like the way Rust/LLVM is today) to enjoy the best of both worlds. The ecosystem will likely have multiple "smoke and mirror" tools that highly leverage WASI in clever ways to further provide "magic" and "hand-waving" to hide complexity from developers and operations. Unfortunately, many of these fancy shims will probably still require a browser.</p><p>At the <strong>engine</strong> and <strong>specification</strong> level, there should be no issues around vendor lock-in and forcing developers to choose between clouds, platforms, environments, etc. People will be able to choose the engine they need based on their requirements and pick and choose which component or WASI level they need based on requirements, not the artificial limitations we have today.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="application-level-choice">Application-Level Choice<a class="hash-link" href="#application-level-choice" title="Direct link to heading">​</a></h2><p>Today, the choice of application or application platform to support WebAssembly modules is extremely limited. In addition to the lack of choice variety, each choice requires a <em>total embrace</em> and <strong><em>lock</em></strong> into a particular vendor's environment, SDK, tool chain, and so on.</p><p>In the current ecosystem, if you want edge functions written in WebAssembly, you'll have to use <em>Fastly</em> or <em>CloudFlare</em>'s SDK. If you want to add third-party plugins to your application, you'd use <em>E2 Core</em>'s SDK. If you want self-contained, freestanding microservices written in WebAssembly, you could use the <em>Spin</em> SDK. If you want portable distributed actors loosely coupled to capability contracts, you may want to use the <em>wasmCloud</em> SDK.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="embracing-the-road-to-ubiquity">Embracing the Road to Ubiquity<a class="hash-link" href="#embracing-the-road-to-ubiquity" title="Direct link to heading">​</a></h2><p>As the WebAssembly community and ecosystem moves forward, we plan on continuing to move at the vanguard of this momentum, so that we're adapting our foundations to incorporate new power, features, and flexibility as it becomes available and more mature.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-developer-sdk">The Developer SDK<a class="hash-link" href="#the-developer-sdk" title="Direct link to heading">​</a></h3><p>The wasmCloud developer experience today is very much influenced by the notion that we originally wanted there to be no measurable difference between consuming <a href="https://wasmcloud.dev/app-dev/std-caps/" target="_blank" rel="noopener noreferrer">first party capability providers</a> and consuming third party providers.</p><p>However, since everyone making an application or platform decision at this level will be opting into the vendor's SDK, it is necessary for us to make this SDK as optimized for developers as as possible, making the following first-party activities and capabilities "brain-dead simple" <em>by default</em>:</p><ul><li>HTTP Server</li><li>HTTP Client</li><li>Message Broker</li><li>Blob Store (e.g. S3)</li><li>Key Value</li><li>SQL DB</li><li>Actor-to-Actor Calls</li></ul><p>This wasmCloud developer SDK will be a thin wrapper on top of the generated interface code designed to smooth and optimize the developer experience and ease of use. Using this SDK will insulate developers from the churn and change happening at the engine and specification level. As <code>wit</code> and the component model mature, we'll simply integrate that work into our SDK, sparing developers from as many breaking changes as possible.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-component-model">The Component Model<a class="hash-link" href="#the-component-model" title="Direct link to heading">​</a></h3><p>Once WebAssembly is boring and ubiquitous and tooling exists for all manner of scenarios and the component model has become mature, developers will be able to rapidly adapt their existing code bases to any number of platform providers because consuming them becomes just a matter of generating client code against wit models.</p><p>It's worth noting that practically speaking, most developers won't be doing this. The "easy default" case will likely be that developers will choose to use the ready-made, shrink-wrapped SDK of whichever platform they choose to run their code on.</p><p>However, being built on the <a href="https://wasmcloud.com/blog/webassembly_components_and_wasmcloud_actors_a_glimpse_of_the_future/" target="_blank" rel="noopener noreferrer">component model</a> gives us the ability to rapidly adapt to any changes in the community and, more importantly, assert that there is <em>no vendor lock-in for consuming wasmCloud-based services like Cosmonic</em>, only the choice of relying on any of the portable component modules that represent the developer-facing contract for capability providers.</p><p>There is an effort within the standards community to describe a means by which a wasm component can specify the requirements of its host in terms of the components it uses. At the moment, these specifications are called <em>world files</em>, but that nomenclature could change at any moment.</p><p>The concept of this type of requirements specification is subtle yet <em>incredibly</em> powerful. In a hypothetical future world where WebAssembly and the component model are both boring, a module running in "vendor A"'s cloud that requires a key-value store could be moved to "vendor B"'s cloud without design change or recompilation, provided both vendors support exposing the WASI key-value component in their "world". This could truly be a fulfillment of the portability promise beyond just escaping from the confines of OS and CPU coupling.</p><p>In this bright, idyllic, near-future world<sup id="fnref-2-206e3c"><a href="#fn-2-206e3c" class="footnote-ref">2</a></sup>, people write code <em>one way</em> and then the selection of where they deploy their code becomes one of personal preference, financial concerns, and available vendor features. No longer will we be locked into a particular vendor because that's the SDK we started experimenting with a year ago.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a class="hash-link" href="#summary" title="Direct link to heading">​</a></h2><p>Those of us in the WebAssembly and, more specifically, <em>wasmCloud</em>, community are not only looking forward to this bright future, but doing everything in our power to make it happen. If you're interested in helping us usher in this new era, please join our <a href="https://slack.wasmcloud.com" target="_blank" rel="noopener noreferrer">slack</a> or our weekly community meetings (1PM EST on Wednesdays. Stop into our slack for the Zoom invite) or look for places to contribute to our code.</p><div class="footnotes"><hr><ol><li id="fn-1-206e3c">Most organizations who think this will work out of the box without lots of re-engineering will be disappointed.<a href="#fnref-1-206e3c" class="footnote-backref">↩</a></li><li id="fn-2-206e3c">Note that it will take a lot of effort, collaboration, standards work, and coding to bring about this utopian future. But it <em>is</em> possible.<a href="#fnref-2-206e3c" class="footnote-backref">↩</a></li></ol></div>]]></content>
        <author>
            <name>Kevin Hoffman</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reflections on Three Years of wasmCloud]]></title>
        <id>/wasmcloud_third_anniversary</id>
        <link href="https://wasmcloud.com/blog/wasmcloud_third_anniversary"/>
        <updated>2022-06-25T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[Reflections on Three Years of wasmCloud]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="waxosuit" src="/assets/images/waxosuit-de6e7a4587403b379ee35af92e043b48.png" width="400" height="400" class="img_ev3q"></p><p>It's hard to believe that wasmCloud has been around for 3 years, and the inspiration and desire even longer.</p><p>It was a pleasant, cold winter's day in February of 2016. A friend of mine had sent me an inconspicuous link to an unassuming article. Surely this link would never send me down an inescapable rabbit hole from which I have yet to escape to this day. <em>Surely</em>.</p><p>The offending article was about this thing called the <a href="https://lwn.net/Articles/674770/" target="_blank" rel="noopener noreferrer">Cloud ABI</a>. The short version of the story behind Cloud ABI is that people were frustrated with the lack of security around the native plugin model. They were also frustrated with the lack of performance of secure isolation mechanisms like bulky virtual machines that provided better security than native plugins. Further, the folks behind this movement were also disappointed with the way in which capabilities could be granted to application code. Cloud ABI was meant to be the solution to these things and more.</p><p>Fast forward a year and, at least as far as I could tell, the efforts around Cloud ABI had stagnated, making way for this new thing called WebAssembly. WebAssembly's 1.0 specification aimed to deal with the security, isolation, performance, and portability problems that Cloud ABI wanted to tackle. Eventually, WASI would be born of the evolution of the Cloud ABI ideas around granting POSIX-like capabilities to user code. I don't mean to imply that there is direct lineage from Cloud ABI to WebAssembly, but you can see relationship and shared inspiration.</p><p>I'd been inspired about the concepts from Cloud ABI since early 2016. I'd continued to follow the evolution of this idea through 2017 (WebAssembly was announced in 2015 and released in March of 2017) and into early 2018, where I dove head first into WebAssembly until I couldn't stand idly by any longer. I decided to write a book about it. I started writing <a href="https://pragprog.com/titles/khrust/programming-webassembly-with-rust/" target="_blank" rel="noopener noreferrer"><em>Programming WebAssembly with Rust</em></a> in an official capacity in June of 2018.</p><p>In the process of writing the book, in telling the "hero's journey" from beginner to expert in the WebAssembly ecosystem, I'd developed an itch that needed scratching. The book would come out in March of 2019, but it wasn't enough for me. I knew what WebAssembly would ultimately be capable of, and I had a choice. I could sit back and wait for the ecosystem to catch up to Wasm's potential, or I could roll up my sleeves and start building it myself. For those doing the math, my book came out just 3 months after WebAssembly became a W3C recommendation.</p><p>When I started building, the first question I asked, before anything else, was, <em>"Can I embed security information into a WebAssembly module so that it doesn't require consulting a central authority to validate?"</em>. This was before <em>"will it blend?"</em> and long before I ever figured out what would come to be called the <a href="https://wasmcloud.dev/reference/lattice/" target="_blank" rel="noopener noreferrer">lattice</a>. As a proof of concept, I found that I could place signed JSON Web Tokens (JWT) into a Wasm module without interfering with its execution. I could sign a module with a list of <em>capability claims;</em> a finite list of what this module was allowed to access. This stepping-off point ultimately led to the GitHub release of the first prototype of waxosuit in June of 2019, so named because we likened the framework to an <em>exosuit</em> into which you could place your WebAssembly modules. We subsequently renamed it to <a href="https://github.com/wasmCloud" target="_blank" rel="noopener noreferrer">wasmCloud</a>, but we will always have a place in our heart for the waxosuit logo (the header image for this blog).</p><p>I guess this is the part where I get to say that, <em>back in my day, our Wasm runtimes
had to walk uphill both ways in the snow, and we liked it</em>. The first version of
<code>waxosuit</code> was a standalone Rust binary (about 23MB on Linux) that could read a manifest
file and use it to start actors and providers and configure them. It had no networking
support outside of the providers--hosts were an island unto themselves.</p><p>The first version of the runtime was built with Rust's "heavy" threads and communication between them was done via channels. There was a background thread per actor, one per capability provider, and another used for dispatch between the two. Ultimately, this became too much spaghetti to maintain, and we refactored.</p><p>This refactor switched from "heavy" threads to using an actor-model crate for Rust called&nbsp;<a href="https://actix.rs/book/actix/sec-2-actor.html" target="_blank" rel="noopener noreferrer">Actix</a>. It made a lot of sense at the time--We were building an actor-based host runtime so an actor model for the internal plumbing felt harmonious. It did clean up the spaghetti from the heavy threads and we were able to see some performance improvements in function calls. However, Actix is based on Rust's async model, and carries all of the baggage that entails. The more we added features to this new runtime, the more difficult it became to develop. Ultimately, the only people who could touch certain parts of the codebase were those who knew the precise magical incantation of syntax to get the futures+Actix code to work.</p><p>This violated one of the core philosophies of wasmCloud. Every aspect of the codebase needed to be accessible to everyone. This new code was inscrutable even to those who wrote it. The key smell occurred when we were planning upcoming features and people visibly recoiled when we suggested large enhancements to the core Actix (async) plumbing.</p><p>It felt like we were rewriting large portions of Erlang's OTP in Rust. In fact, it felt so much like it that we made a huge decision to rewrite the host runtime in Elixir. We looked at where we were spending our time and it turned out to be the very same horrible 90/10 split that we're trying to eliminate with wasmCloud. We spent 90% of our time working on things that weren't core features like async and concurrency and thread-safe queue and dispatch management, and 10% actual features. The proposition was that if we "simply" built on top of OTP, we could stop rewriting OTP in Rust and instead focus on wasmCloud-specific features.</p><p>This was a&nbsp;<em>huge</em>&nbsp;undertaking. There is fantastic support for calling Rust functions from Elixir, so we knew we wouldn't need to completely rewrite <em>all</em> of our crates. We thought it was going to be an enormous task and, of course, it turned out to be twice as long and difficult as originally expected. Even with all of the effort and time we put into it, we still knew it had been worth it. Immediately our runtime was able to do more things with better and more clear concurrency.</p><p>The codebase got less intimidating, but it was still daunting because Elixir is new to a lot of people. However, we'd rather walk people through a functional programming forest than have them hack their way through a code jungle armed with nothing but a fork.</p><p>It grew easier to add new features and functionality to the host that were tolerant to crashes and ran concurrently while still consuming a small amount of resources. We learned a&nbsp;<em>ton</em>&nbsp;about running Elixir in production environments, but that's likely a topic for a whole series of blog posts on their own.</p><p>It's hard to imagine that it's been three years. Since we started, the community has grown, we've steadily increased the number of people who attend our weekly community calls, the slack regularly gets new members, and we routinely see contributions from new folks and are continually surprised by what people are building using wasmCloud.</p><p>With all this in our rear view mirror, the best is yet to come. With all that we've experienced and learned, we can clearly see what needs to be done to continually improve the developer experience so that wasmCloud will be&nbsp;<em>the</em>&nbsp;way to build secure, portable, distributed applications that can dynamically scale from monoliths to globally redundant services with the flip of a switch.</p>]]></content>
        <author>
            <name>Kevin Hoffman</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebAssembly Components and wasmCloud Actors: A Glimpse of the Future]]></title>
        <id>/webassembly_components_and_wasmcloud_actors_a_glimpse_of_the_future</id>
        <link href="https://wasmcloud.com/blog/webassembly_components_and_wasmcloud_actors_a_glimpse_of_the_future"/>
        <updated>2022-06-16T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[Using the Component Model with wasmCloud Actors]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="wasm" src="/assets/images/wasm-646a4d97ae9e2335b37989568d48a04f.png" width="650" height="364" class="img_ev3q"></p><p>Today we thought we would give you a glimpse of the future of WebAssembly and wasmCloud. As
wasmCloud maintainers, we've always had a goal to follow all standards in the WebAssembly community.
However, our other goal has been to create a platform on which you could leverage the power of Wasm
for real projects. For the last few years, these two goals have been somewhat at odds with one
another due to the bleeding-edge nature of Wasm. We've had to bridge the gap between Wasm's current
state and the requirements needed to do Something Real™ with it. This is starting to change!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-component-model">The Component Model<a class="hash-link" href="#the-component-model" title="Direct link to heading">​</a></h2><p>In the past year, the standards around Wasm and WASI have started to solidify and become reality.
One of the most interesting emerging standards has been the <a href="https://github.com/WebAssembly/component-model" target="_blank" rel="noopener noreferrer">Component
Model</a>. The TL;DR of the component model is that you
are able to glue together arbitrary Wasm modules that import or export functions, as specified by an
interface file. These interface files are called <code>wit</code> files (Wasm Interface Types) and allow for
language agnostic code generation. This code is what handles converting the raw numbers of plain
Wasm (i.e. integers and bytes) into concrete types. If you are familiar with wasmCloud already, this
is <a href="https://wasmcloud.dev/interfaces/" target="_blank" rel="noopener noreferrer">very similar</a> to what we call "contract driven development,"
which we use to separate non-functional requirements from business logic. Still confused? Don't
worry, we'll be using some specific examples below. If this topic interests you and you'd like more
information, we highly recommend you check out all of the
<a href="https://github.com/WebAssembly/component-model/tree/main/design" target="_blank" rel="noopener noreferrer">documentation</a> and
<a href="https://radu-matei.com/blog/intro-wasm-components/" target="_blank" rel="noopener noreferrer">examples</a> that are available for the component
model.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-new-way-to-build-actors">A New Way to Build Actors<a class="hash-link" href="#a-new-way-to-build-actors" title="Direct link to heading">​</a></h2><p>So at this point, you are probably wondering "What does this have to do with wasmCloud? Don't you
already have your own contract stuff and RPC protocol?" Good question! Let's dive into this.</p><p>We recently created a proof of concept that shows our <a href="https://github.com/wasmCloud/examples/blob/557770a1d1d763aab76583af9f57e2a4e2aa4e3a/actor/kvcounter/README.md" target="_blank" rel="noopener noreferrer">kvcounter
example</a>
using the Component Model to provide all the necessary logic that used to be provided by our
<code>wasmbus-rpc</code> Rust crate and other language specific libraries. Please note that this is not a fully
functional example that can run in wasmCloud currently; it's meant to show how we can glue together
various components, call the actor from the host, and then have the actor send data back to the
host. We'll break down all the different parts of this example below, but you can find the actual
source code <a href="https://github.com/wasmCloud/examples/tree/spike/wit-interfaces/actor/kvcounter" target="_blank" rel="noopener noreferrer">here</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="old-vs-new">Old vs new<a class="hash-link" href="#old-vs-new" title="Direct link to heading">​</a></h3><p><img loading="lazy" alt="components-diagram" src="/assets/images/components_diagram-1d5903bd10cc0a5ec658663a1b4c596f.png" width="1737" height="1098" class="img_ev3q"></p><p>As you can see in the diagram above, there was a lot of stuff that had to be done inside of
language-specific and user-managed code. In fact, we just finished writing all of this code for Go
as well, and it was a heavy lift! In the future version, things become significantly more modular.
The communication to the host (which then gets sent over our RPC layer, <a href="https://wasmcloud.dev/reference/lattice/" target="_blank" rel="noopener noreferrer">the
lattice</a>) is handled by one module, and then we just
provide a single Wasm module that satisfies each interface. This highlights why we are excited about
Wasm. Wasm is language agnostic, which means that instead of having to create special <code>wasmbus-rpc</code>
libraries for every single language we want to support, and then generating code for every
interface, we can now write a single module in whatever language we want. Then, we can use that
module to provide the necessary code to a wasmCloud actor written <em>in any other language</em>. If that
doesn't make you excited, we don't know what will.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-detailed-view">The detailed view<a class="hash-link" href="#the-detailed-view" title="Direct link to heading">​</a></h3><p>From here on out, we are going to go into the specifics of how everything works. This will likely be
useful to anyone wanting to experiment with the component model or who wants to better understand
how it works. If that doesn't interest you, please feel free to skip down to the <a href="#what-did-we-learn">"What did we
learn?" section</a></p><p>We're going to go from the top to the bottom as represented in the diagram above to explain what
each component does, so please go back and reference it if anything below is confusing. Then we'll
explain how we linked and ran the example.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="the-httpserver-receiver">The httpserver "receiver"<a class="hash-link" href="#the-httpserver-receiver" title="Direct link to heading">​</a></h4><p>Under the new paradigm, each wasmCloud interface will need to have two different WebAssembly
modules: a sender and a receiver. The receiver half is used when the actor needs to receive a
message from the host it is running on (hence the name). In wasmCloud, this means the host will
receive a message on <a href="https://wasmcloud.dev/reference/lattice/" target="_blank" rel="noopener noreferrer">the lattice</a> and then invoke the
<code>receive</code> method of the actor. This first module of the proof of concept is the httpserver contract
receiver. In order to implement this, the module needs to import one interface and export another.
Here are what the interfaces look like:</p><p><strong>wasmbus_receiver.wit</strong></p><div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// These are importing some common types that you see in the receive function signature. See the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// actual code on Github if you are curious what these types look like</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use * from error-type</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use * from wasmbus-common</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">receive: function(msg: message) -&gt; expected&lt;payload, rpc-error&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You'll see that this interface has single function, the <code>receive</code> function that allows an actor to
receive a message. We'll see how this works in code below</p><p><strong>httpserver.wit</strong></p><div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">use * from error-type</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type header-map = list&lt;tuple&lt;string, string&gt;&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">record http-request {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // HTTP method. One of: GET,POST,PUT,DELETE,HEAD,OPTIONS,CONNECT,PATCH,TRACE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    method: string,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // full request path</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    path: string,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // query string. May be an empty string if there were no query parameters.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    query-string: string,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // map of request headers (string key, string value)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    header: header-map,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    body: list&lt;u8&gt;,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">record http-response {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // statusCode is a three-digit number, usually in the range 100-599 a value of 200 indicates success.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    status-code: u16,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Map of headers (string keys, list of values)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    header: header-map,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Body of response as a byte array. May be an empty array.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    body: list&lt;u8&gt;,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">handle-request: function(req: http-request) -&gt; expected&lt;http-response, rpc-error&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The httpserver receiver has to export the <code>receive</code> method and implement the logic to parse that
message as an HTTP request. Basically, it acts as a translation layer between the RPC layer and the
actual contract it needs to call. The code for it is actually quite straightforward (and is
annotated with comments below). Our code was written in Rust, but you could write it in any language
that has <a href="https://github.com/bytecodealliance/wit-bindgen/" target="_blank" rel="noopener noreferrer">wit-bindgen</a> support</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">wasmbus_receiver</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Import the httpserver contract so we can call it</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token namespace" style="opacity:0.7">wit_bindgen_rust</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">import!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"../httpserver.wit"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Export our implementation of the `receive` method</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token namespace" style="opacity:0.7">wit_bindgen_rust</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">export!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"../wasmbus-receiver.wit"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">HANDLE_REQUEST_METHOD</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">str</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"HttpServer.HandleRequest"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Some custom types for massaging data are elided here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(Default, Clone)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">WasmbusReceiver</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">wasmbus_receiver</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">WasmbusReceiver</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">WasmbusReceiver</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">receive</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">msg</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Message</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Payload</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">RpcError</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> msg</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">method </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">HANDLE_REQUEST_METHOD</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">Err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">RpcError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">MethodNotHandled</span><span class="token punctuation" style="color:#393A34">(</span><span class="token macro property" style="color:#36acaa">format!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token string" style="color:#e3116c">"Method {} is not supported by the httpserver contract"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                msg</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">method</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Parse the message body into an http request</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> req</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">HttpRequestInternal</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">serde_json</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">from_slice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">msg</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">e</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token class-name">RpcError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Deser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token macro property" style="color:#36acaa">format!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"httpserver: {}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Data massaging</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> header</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Vec</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> req</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">header</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">iter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params punctuation" style="color:#393A34">(</span><span class="token closure-params">k</span><span class="token closure-params punctuation" style="color:#393A34">,</span><span class="token closure-params"> v</span><span class="token closure-params punctuation" style="color:#393A34">)</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">k</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_str</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_str</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">collect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Call the `handle_request` method that will be provided by another module</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> resp</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">HttpResponseInternal</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">httpserver</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">handle_request</span><span class="token punctuation" style="color:#393A34">(</span><span class="token namespace" style="opacity:0.7">httpserver</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">HttpRequest</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            method</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">method</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            query_string</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">query_string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            header</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">header</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            body</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">body</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">httpserver_to_wasmbus_error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token namespace" style="opacity:0.7">serde_json</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">to_vec</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">resp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">e</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token class-name">RpcError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Ser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="the-business-logic">The Business Logic<a class="hash-link" href="#the-business-logic" title="Direct link to heading">​</a></h4><p>This module is the actual part that contains the business logic that someone would be writing. This
is the only user-provided code for someone writing their business logic to run on wasmCloud. All of
the other modules described in this section would be provided by the interface writer or by
wasmCloud directly.</p><p>This code also requires the use of two interfaces: httpserver (see the previous section) and
keyvalue:</p><p><strong>keyvalue.wit</strong></p><div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">use * from error-type</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Increment the value of the key by the given amount</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">increment: function(key: string, value: s32) -&gt; expected&lt;s32, rpc-error&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Please note that this is a stripped-down version of what the actual keyvalue contract would look
like, to keep things simple. Now, we can move on to the actual code (annotated):</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">httpserver</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Import the keyvalue contract so we can call it</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token namespace" style="opacity:0.7">wit_bindgen_rust</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">import!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"../keyvalue.wit"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Export our implementation of the httpserver contract</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token namespace" style="opacity:0.7">wit_bindgen_rust</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">export!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"../httpserver.wit"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(Default, Clone)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">Httpserver</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">httpserver</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Httpserver</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">Httpserver</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">handle_request</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">HttpRequest</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">HttpResponse</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">RpcError</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// make friendlier key</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> key </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">format!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"counter:{}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">replace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token char">'/'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">":"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// bonus: use specified amount from query, or 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> amount</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">i32</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">form_urlencoded</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">parse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">query_string</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_bytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params punctuation" style="color:#393A34">(</span><span class="token closure-params">n</span><span class="token closure-params punctuation" style="color:#393A34">,</span><span class="token closure-params"> _</span><span class="token closure-params punctuation" style="color:#393A34">)</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> n </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"amount"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params punctuation" style="color:#393A34">(</span><span class="token closure-params">_</span><span class="token closure-params punctuation" style="color:#393A34">,</span><span class="token closure-params"> v</span><span class="token closure-params punctuation" style="color:#393A34">)</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> v</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">parse</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">i32</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap_or</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap_or</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// increment the value in kv and send response in json</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">body</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> status_code</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">match</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">increment_counter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> amount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token namespace" style="opacity:0.7">serde_json</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">json!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"counter"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">200</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// if we caught an error, return it to client</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">Err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token namespace" style="opacity:0.7">serde_json</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">json!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"error"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">format!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"{:?}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token number" style="color:#36acaa">500</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> resp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">HttpResponse</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            body</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> body</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_bytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_vec</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            status_code</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            header</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Vec</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">resp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">increment_counter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">i32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">i32</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">RpcError</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Call the `increment` function that will be provided by another module</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token namespace" style="opacity:0.7">keyvalue</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">increment</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map_wit_err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You'll see that this code looks almost identical to the <a href="https://github.com/wasmCloud/examples/blob/557770a1d1d763aab76583af9f57e2a4e2aa4e3a/actor/kvcounter/src/lib.rs#L1" target="_blank" rel="noopener noreferrer">original kvcounter
actor</a>,
except that there is <strong><em>zero wasmCloud-specific code needed</em></strong>!</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="the-keyvalue-sender">The keyvalue "sender"<a class="hash-link" href="#the-keyvalue-sender" title="Direct link to heading">​</a></h4><p>As we mentioned above, there are two halves needed for each contract. This component exports the
keyvalue contract described above and also requires one other interface:</p><p><strong>wasmbus-sender.wit</strong></p><div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">use * from error-type</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use * from wasmbus-common</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">send: function(msg: message, contract-name: string, link-name: option&lt;string&gt;) -&gt; expected&lt;payload, rpc-error&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>As you can see, this has a single function called <code>send</code> that is used to send a message through the
lattice. This does the exact reverse of the receiver, in that it takes a concrete type and turns it
into a generic message that can be sent. The annotated code is below:</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">keyvalue</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> wasmbus_sender </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> wasmbus</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Export our implementation of the keyvalue contract</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token namespace" style="opacity:0.7">wit_bindgen_rust</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">export!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"../keyvalue.wit"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Import the sender contract for us to call</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token namespace" style="opacity:0.7">wit_bindgen_rust</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">import!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"../wasmbus-sender.wit"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Custom request type elided</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(Default, Clone)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">Keyvalue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">keyvalue</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Keyvalue</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">Keyvalue</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">increment</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">i32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">i32</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">RpcError</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Encode the data as our payload</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> payload </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">serde_json</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">to_vec</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">IncrementRequest</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">e</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token class-name">RpcError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Ser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Call the `send` method provided by another module</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// NOTE: this code is not dealing with the link name yet just to keep it simple</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// We will figure out how we want this to work when implementing</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> resp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">wasmbus</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token namespace" style="opacity:0.7">wasmbus</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Message</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                method</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"KeyValue.Increment"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                arg</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">payload</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">"wasmcloud:keyvalue"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">None</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">wasmbus_to_keyvalue_error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token namespace" style="opacity:0.7">serde_json</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">from_slice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">resp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">e</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token class-name">RpcError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Deser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="the-host-sender">The host sender<a class="hash-link" href="#the-host-sender" title="Direct link to heading">​</a></h4><p>Last, but not least, is the module that can send a message back to a host (so the host can send it
on the lattice). For our purposes here, this just prints to stdout (which means we are using a
function from the host just like we would for real), but when we do it for realsies, this will be
calling a specific function the host will provide for us. This module only requires the
<code>wasmbus-sender.wit</code> contract shown in the previous section. As for the code:</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">wasmbus_sender</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Export our implementation for the `send` method</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token namespace" style="opacity:0.7">wit_bindgen_rust</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">export!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"../wasmbus-sender.wit"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(Default, Clone)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">WasmbusSender</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">wasmbus_sender</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">WasmbusSender</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">WasmbusSender</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        msg</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Message</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        contract_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        link_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Option</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">String</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Payload</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">RpcError</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Fake a host call (fd_write in this case)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">"Linkname: {}, contract_name: {}, msg: {:#?}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            link_name</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap_or_else</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"default"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            contract_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            msg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Return the answer to everything</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token namespace" style="opacity:0.7">serde_json</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">to_vec</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token number" style="color:#36acaa">42</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="linking-and-running">Linking and running<a class="hash-link" href="#linking-and-running" title="Direct link to heading">​</a></h4><div class="theme-admonition theme-admonition-caution alert alert--warning admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_S0QG"><p><strong>NOTE</strong>: Right as we were preparing this blog post, the <code>wasmlink</code> command and tooling
was <a href="https://github.com/bytecodealliance/wit-bindgen/pull/240" target="_blank" rel="noopener noreferrer">removed</a> from the wit-bindgen repo in
favor of the <a href="https://github.com/bytecodealliance/wit-bindgen/pull/239" target="_blank" rel="noopener noreferrer">most up to date component model
code</a>. This new component model tooling is
going to be the future, but currently, there isn't really a replacement for <code>wasmlink</code>. So the
section below is slightly out of date, but still shows that all of this will work with the new
tooling in the future. As we actually implement this, we will release a new blog post that shows how
the new tooling works</p></div></div><p>For our proof of concept, we used the <code>wasmlink</code> command. When we do this for real, we will use the
underlying Rust linker library that <code>wasmlink</code> uses. To be honest, this tool is a little confusing
to use, so hopefully we can enlighten you here. Before linking, we built all of the modules in the
workspace by running <code>cargo build --release</code>. Once they were built, we ran the following command to
link them together</p><div class="language-terminal codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-terminal codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wasmlink ./target/wasm32-wasi/release/httpserver.wasm \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   -m keyvalue=./target/wasm32-wasi/release/keyvalue.wasm \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   -m httpserver=./target/wasm32-wasi/release/kvcounter_actor.wasm \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   -m wasmbus-sender=./target/wasm32-wasi/release/wasmbus_sender.wasm \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   -i wasmbus-sender=wasmbus-sender.wit \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   -i keyvalue=keyvalue.wit \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   -i httpserver=httpserver.wit \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   -i receiver=wasmbus-receiver.wit \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   -p wasmtime \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   -o compiled.wasm</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Ok, so that is a pretty gnarly command. Let's break it down:</p><p>First off is the module name (<code>./target/wasm32-wasi/release/httpserver.wasm</code>). There is one very
important detail here. This module should be the one you want to call (the one with the <code>receive</code>
function), otherwise the export gets mangled and no longer shows up in the compiled file.</p><p>All of the <code>-m</code> flags specify the other modules to link in. They are specified in the form of
<code>MODULE_NAME=MODULE_PATH</code>. The module name must match the name of the interface it is exporting.
Those interfaces are specified with the <code>-i</code> flag with the form <code>MODULE_NAME=WIT_PATH</code>. The <code>-o</code>
flag specifies the output path where the compiled module is written to.</p><p>Oh, and that <code>-p</code> flag? Pretty sure it doesn't matter based on what we found in the code, but it is
a required flag. It does look like it may matter in the future though.</p><p>Whew...that was hard. Onward to the cool part – actually running the thing. We did this in code as
it was needed to actually call everything properly. Let's look at the whole code sample (annotated):</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">wasmtime</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">Config</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Engine</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Linker</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Module</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Store</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">wasmtime_wasi</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">WasiCtx</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Import the wasmbus-receiver contract with the wasmtime helpers (note that this is a different</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// crate than what we used above)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token namespace" style="opacity:0.7">wit_bindgen_wasmtime</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">import!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"/Users/oftaylor/Documents/code/examples/actor/kvcounter/wasmbus-receiver.wit"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Elided an http request type here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// A custom struct for storing data in the wasmtime engine</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">StoreData</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    wasi</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">WasiCtx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    receiver</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">wasmbus_receiver</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">WasmbusReceiverData</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> config </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Config</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">default</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Enable the experimental module linking and multimemory proposals. These are required to make things work</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    config</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">wasm_module_linking</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    config</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">wasm_multi_memory</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> engine </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Engine</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">config</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> linker</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Linker</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">StoreData</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Linker</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">engine</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Add all the wasi stuff to the linker</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token namespace" style="opacity:0.7">wasmtime_wasi</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">add_to_linker</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> linker</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">ctx</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> ctx</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">wasi</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Unable to add to wasi things to linker"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> wasi </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">wasmtime_wasi</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">WasiCtxBuilder</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">inherit_stdio</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">inherit_args</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Unable to inherit args"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> store </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Store</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">engine</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">StoreData</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            wasi</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            receiver</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">wasmbus_receiver</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">WasmbusReceiverData</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Load the compiled wasm module we built above</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> receiver_module </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Module</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from_file</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">engine</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"/code/examples/actor/kvcounter/compiled.wasm"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Use the instantiate helper from wit-bindgen</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">server</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> _instance</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">wasmbus_receiver</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">WasmbusReceiver</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">instantiate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> store</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">receiver_module</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> linker</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">ctx</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> ctx</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">receiver</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> req </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">HttpRequestInternal</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        method</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"GET"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        query_string</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        header</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">vec!</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"HOST"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"foobar"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        body</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Call the receive method exported by our module</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> resp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">receive</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> store</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token namespace" style="opacity:0.7">wasmbus_receiver</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Message</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                method</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"HttpServer.HandleRequest"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                arg</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token namespace" style="opacity:0.7">serde_json</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">to_vec</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Should serialize"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Shouldn't get a trap"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Unable to send to actor"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"body: {}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from_utf8_lossy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">resp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>When we ran this, we could see the output:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Linkname: default, contract_name: wasmcloud:keyvalue, msg: Message {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    method: "KeyValue.Increment",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    arg: [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        123,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        34,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        107,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        101,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">body: {"status_code":200,"header":[],"body":[123,34,99,111,117,110,116,101,114,34,58,52,50,125]}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This means we got all the way down to the <code>send</code> method and returned data all the way up the stack
as the expected HTTP response!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-did-we-learn">What did we learn?<a class="hash-link" href="#what-did-we-learn" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="benefits">Benefits<a class="hash-link" href="#benefits" title="Direct link to heading">​</a></h3><ul><li>We won't need to use our bespoke Smithy + code generation any more</li><li>No more bespoke wasmbus libraries per language. Modules can even be loaded by providers to
properly translate a message from the lattice</li><li>No wasmCloud-specific code when you write your actors. In fact, if our contract is the same as
those used by other platforms, they could even be interchangeable!</li><li>Easily pluggable and patchable wasmCloud specific code. If there is a bug fix we have to the
underlying RPC protocol, we can hot patch all running actors with no user interaction</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rough-edges">Rough edges<a class="hash-link" href="#rough-edges" title="Direct link to heading">​</a></h3><p>To be clear, it isn't all sunshine and rainbows yet. These are a few of the rough edges we
encountered and how they impacted us</p><ul><li>No dynamic linking yet. This means we have to manually pull everything down and link it before
we can run it. Not ideal, but we are able to do it through code.</li><li>Linking everything means you must include both the module and the interface file when
distributing things, which means you have to build tooling around building things like
<a href="https://github.com/deislabs/bindle" target="_blank" rel="noopener noreferrer">bindles</a></li><li>Even when you have reused types (like our <code>rpc-error</code> above in the wit files), each interface
technically has a different type in strongly-typed languages. This requires conversion between
the identical types imported from different interfaces. Obviously things like Rust macros can be
use to make this a little less clunky, but it is a bit of a chore</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="where-do-we-go-from-here">Where do we go from here?<a class="hash-link" href="#where-do-we-go-from-here" title="Direct link to heading">​</a></h2><p>Now we move into the future. To be absolutely clear, YOU CANNOT yet do this inside of wasmCloud, but
this proof of concept proved that we can use the component model to greatly improve the experience
of writing actors in wasmCloud <em>and</em> achieve our goal of being in line with community standards. In
order to make this all work, it will take a major refactor of the underlying code we use to run
actors as well as some refactors to our RPC layer. This will obviously be a breaking change so we
will need to clearly communicate when the work is going to land so as to not disturb too many of our
current users.</p><p>We will also need to rely more heavily on <a href="https://github.com/deislabs/bindle" target="_blank" rel="noopener noreferrer">Bindle</a> and
eventually on the forthcoming component registry work from the Bytecode Alliance. These tools are
designed specifically to account for assembling various parts of a final application (like the
various interfaces and different modules). We already have <a href="https://wasmcloud.dev/reference/bindle/" target="_blank" rel="noopener noreferrer">experimental support for
bindles</a> in wasmCloud, but they have to be hand rolled
rather than being automatically created. There also needs to be a place from which you can fetch the
necessary interfaces for use in building. All of these elements of developer experience are
important to have before we roll this out.</p><p>So, stay tuned! We are planning on a follow up blog post to this one once we actually roll out the
support in wasmCloud</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="special-thanks">Special Thanks<a class="hash-link" href="#special-thanks" title="Direct link to heading">​</a></h2><p>We wanted to give a shout out and thanks to <a href="https://radu-matei.com/" target="_blank" rel="noopener noreferrer">Radu Matei</a> for his help as we
figured out some of the intricacies of the component model, as well as his previous work and blog
posts in this area. That work gave us a great starting place for what we are building here.</p>]]></content>
        <author>
            <name>Taylor Thomas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building Portable, Scalable Components with TinyGo and wasmCloud]]></title>
        <id>/example_creating_webassembly_actor_in_go_with_tinygo</id>
        <link href="https://wasmcloud.com/blog/example_creating_webassembly_actor_in_go_with_tinygo"/>
        <updated>2022-06-01T13:00:00.000Z</updated>
        <summary type="html"><![CDATA[A walkthrough of creating a TinyGo wasmCloud actor]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="tinygo-logo" src="/assets/images/tinygo-logo-fb6e7765b8436ed594b214bbe0508fd5.png" width="299" height="255" class="img_ev3q"></p><p><em><a href="https://tinygo.org" target="_blank" rel="noopener noreferrer">TinyGo</a></em> is <em>"a Go compiler for small places"</em>. It is a language designed specifically to work on embedded systems and WebAssembly. If you squint hard enough, you can almost imagine that WebAssembly is a form of embedded system (it's embedded in a host runtime).</p><p>One of the core tenets of wasmCloud has always been that we embrace the specification without doing anything proprietary. In other words, anyone who knows the "<u><a href="https://wasmcloud.dev/reference/wasmbus/ffi/" target="_blank" rel="noopener noreferrer">wasmCloud ABI</a></u>" can create actors in any language that compiles to freestanding WebAssembly. While this is technically true, it's certainly a lot easier when we have an easy SDK and code generation support for a language. Using our SDKs gives you a more friendly library while helping insulate your code from changes to the underlying WebAssembly spec.</p><p>The newest language in our arsenal is TinyGo.</p><p>To get started, you'll need <u><a href="https://github.com/wasmcloud/wash" target="_blank" rel="noopener noreferrer">wash</a></u> version <code>0.11.0</code> or newer.</p><p>Let's create a new empty actor from a template as follows:</p><div class="language-terminal codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-terminal codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> $ wash new actor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Select a project template: ›</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  hello: a hello-world actor (in Rust) that responds over an http connection</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">❯ echo-tinygo: a hello-world actor (in TinyGo) that responds over an http connection</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>I'm going to call this new project <code>kvcounter</code> because, for this blog post, we're going to build an actor that exposes a RESTful interface to a counter service.</p><p>This is the actor we get "out of the box":</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"github.com/wasmcloud/actor-tinygo"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"github.com/wasmcloud/interfaces/httpserver/tinygo"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    me </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> Kvcounter</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    actor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">RegisterHandlers</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">httpserver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">HttpServerHandler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">me</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Kvcounter </span><span class="token keyword" style="color:#00009f">struct</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Kvcounter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">HandleRequest</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ctx </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">actor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    req httpserver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">HttpRequest</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">httpserver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">HttpResponse</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    r </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> httpserver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">HttpResponse</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        StatusCode</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">200</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Header</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">httpserver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">HeaderMap</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Body</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token function" style="color:#d73a49">byte</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"hello"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">r</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In the preceding code, the <code>RegisterHandlers</code> function sets up the appropriate dispatch so that when the bound HTTP server capability provider receives a request, it knows to invoke this actor.</p><p>What we're going to do for this blog post is modify this web request handler so that it takes the name of a counter from the request, increments it using the key-value interface, and returns the new value in response.</p><p>First, let's add another provider interface to our imports by first running <code>go get</code></p><div class="language-terminal codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-terminal codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">go get github.com/wasmcloud/interfaces/keyvalue/tinygo</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This will modify our <code>go.mod</code> file to contain the new interface. Now let's create a new version of the <code>HandleRequest</code> function:</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Kvcounter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">HandleRequest</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ctx </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">actor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    req httpserver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">HttpRequest</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">httpserver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">HttpResponse</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    key </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> strings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Replace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Path</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"_"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    kv </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> keyvalue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewProviderKeyValue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    count</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> kv</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Increment</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> keyvalue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">IncrementRequest</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">InternalServerError</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    res </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"{\"counter\": "</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> strconv</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Itoa</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"}"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    r </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> httpserver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">HttpResponse</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        StatusCode</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">200</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Header</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">httpserver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">HeaderMap</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Body</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token function" style="color:#d73a49">byte</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">r</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">InternalServerError</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err </span><span class="token builtin">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">httpserver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">HttpResponse </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">httpserver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">HttpResponse</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        StatusCode</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">500</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Header</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">httpserver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">HeaderMap</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Body</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token function" style="color:#d73a49">byte</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In this new function, we are converting the <code>Path</code> from the request into a key that will then be used in an <code>Increment</code> operation on the key-value store.</p><p>Something might look a little "off" in the code, and that's this line:</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">res </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"{\"counter\": \""</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> strconv</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Itoa</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\"}"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is something that we have to watch out for in TinyGo. If we use the stock JSON encoding/marshaling package, then TinyGo will use the following WebAssembly imports (shown in <code>wat</code>):</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(import "env" "runtime.ticks" (func $runtime.ticks (type 2)))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(import "env" "syscall/js.valueGet" (func $syscall/js.valueGet (type 3)))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(import "env" "syscall/js.valuePrepareString" (func $syscall/js.valuePrepareString (type 4)))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(import "env" "syscall/js.valueLoadString" (func $syscall/js.valueLoadString (type 3)))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(import "env" "syscall/js.finalizeRef" (func $syscall/js.finalizeRef (type 5)))</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>To get the preceding output, I typically run the following command (though use could also use <code>wasm-objdump</code>, too):</p><div class="language-terminal codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-terminal codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wasm2wat build/kvcounter_s.wasm| grep import</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The <code>wasm2wat</code> binary is included in the <u><a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noopener noreferrer">wabt</a></u> toolkit.</p><p>There are still quite a few places in TinyGo where importing a certain package will trigger the use of the <code>syscall/js</code> package. Once this package is imported, the host runtime will then <em>require</em> the use of these JavaScript host shims and we then immediately lose all of our portability benefits.</p><p>TinyGo is rapidly plugging these holes and providing packages that don't require a JavaScript host runtime, but we still need to watch out for things like this. To keep this example simple rather than hunting for an alternative JSON encoder, we just created a string that contains valid JSON.</p><p>Now, just like any other wasmCloud actor, we can modify the <code>CLAIMS</code> variable in the actor's <code>Makefile</code> to contain both the HTTP server contract and the Key-Value contract:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CLAIMS   = --http_server --keyvalue</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>With our new TinyGo actor in hand, we can start the actor, start two capability providers (HTTP and Key-Value), provide a link definition, and finally curl the running endpoint:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ curl http://localhost:8080/bloggo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{"counter": 1}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ curl http://localhost:8080/bloggo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{"counter": 2}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is just the beginning of a really fun journey supporting TinyGo actors in wasmCloud!</p><p>For a fully functioning version of this sample, you can take a look at it in our <u><a href="https://github.com/wasmCloud/examples/tree/main/actor/kvcounter-tinygo" target="_blank" rel="noopener noreferrer">examples repository</a></u>.</p>]]></content>
        <author>
            <name>Kevin Hoffman</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[wasmCloud Capabilities are Managed Algebraic Effects for WebAssembly Functions]]></title>
        <id>/caps_are_effects</id>
        <link href="https://wasmcloud.com/blog/caps_are_effects"/>
        <updated>2022-05-25T13:00:00.000Z</updated>
        <summary type="html"><![CDATA[wasmCloud Capabilities are a managed, distributed implementation of algebraic effects]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="algebra" src="/assets/images/algebra-1e4d52757c617c6be9a0f5ac7a3c3806.jpg" width="393" height="271" class="img_ev3q"></p><p>We spend a lot of time talking about how the wasmCloud capability provider system, from its abstract contracts to the ability to hot-swap providers, is a way to separate non-functional requirements from business logic code. While all of that is true, it's also a fairly <em>enterprisey</em> way to describe it. In this blog post, I'll describe them another way using terms from functional programming.</p><p>Let's take a look at a simple function:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">f(x) = x + 12</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This function is <em>"pure"</em>. For every input of <code>x</code> there is only one output. In math terms that makes it a proper function, but in programming terms that means it's deterministic, and determinism means we can write unit tests for it. We could write a test that ensures that when I supply a <code>2</code> to this function, it returns <code>14</code>.</p><p>Unfortunately, the second we expand our code beyond the realm of "hello world", it becomes more and more difficult to maintain purity. Our code needs to interact with the world, and it often does so in messy, unpredictable ways. Even if it isn't messy, we frequently see functions where the answer is only predictable for a short period of time.</p><p>Let's take a look at this (psuedocode) function from a hypothetical bank back-end that handles an international withdrawal from a customer's account:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">internationalWithdrawal account amount localCurrency =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    exchangeRate = Market.getRate(localCurrency)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    newAmount = amount * exchangeRate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fee = Market.getFee(localCurrency)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Ledger.withdraw(account, amount, newAmount, exchangeRate)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Ledger.fee(account, fee)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Ledger.balance(account)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This function reaches out to "the market" to get the currency exchange rate between the canonical currency and the local currency. Then it reaches out to get the current fee for international withdrawals. Finally, it consumes a ledger to perform the withdrawal, take away the international transaction fee, and finally return the current/updated balance.</p><p>There's nothing pure about this function, but it's an <em>extremely</em> common idiom. This function relies on two external interactions, a <code>Market</code> and a <code>Ledger</code>. The exchange rate is something that fluctuates constantly throughout the day, and the ledger presumably gives the function access to the account ledger for a specific account.</p><p>This function is non-deterministic because it has a number of <em>algebraic effects</em>. Such effects are a category for the messy, "impure" things that happen in our functions. For most of us, we probably write more impure functions than not.</p><p>I've already tried to make this function fairly clean and simple. In contrast, I've seen functions like this turned into "kitchen sinks" where a single function establishes a connection to two different databases and issues queries directly to them. We fool ourselves into thinking the function is pure by hiding the tight coupling a few layers down in the library, but this is still tight coupling at its worst. In cases like this, you can't test this function without live access to real databases, and after that you have to figure out how to make your tests deterministic (which often involves "test databases").</p><p>A lot of us are used to patterns like (micro)services, abstractions, anti-corruption layers, and more all designed to help us mitigate the ugly side effects this function has. But what if we could embrace these effects and write functions that are explicit about their effect needs, <em>without</em> losing testability, flexibility, and purity?</p><p>In a traditional object-oriented language or framework, we might treat each of these "effect providers" as an interface and then use something like dependency injection to shunt in an implementation for the effect at runtime (and presumably shunt in a mock during test time).</p><p>In wasmCloud, we manage algebraic effects through <u><a href="https://wasmcloud.dev/reference/host-runtime/capabilities/" target="_blank" rel="noopener noreferrer">capability providers</a></u>. Here the capability provider, as seen by the WebAssembly module (<u><a href="https://wasmcloud.dev/reference/host-runtime/actors/" target="_blank" rel="noopener noreferrer">actor</a></u>), is just an abstraction. It's a versioned contract through which the WebAssembly function gets its effects.</p><p>The host runtime is responsible for providing an implementation for those effects or effect providers. This implementation is hot-swappable and dynamically configurable. This means that in our preceding international withdrawal example, we could provide a "test market" at unit test time and then a real connection to the market service when running in production. We could also configure the market connection so it could be "real", but point to a different service in staging than in production.</p><p>Algebraic effects don't need to be big, high-level concepts like database or networking clients. Even something as basic as logging is an effect (because all I/O is "effectful"). So we might use yet another provider like this:</p><div class="language-elixir codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-elixir codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token module class-name">Logger</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">debug</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Performing international withdrawal"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>wasmCloud takes these algebraic effects even further by requiring each of our WebAssembly modules to be <u><a href="https://wasmcloud.dev/reference/host-runtime/security/" target="_blank" rel="noopener noreferrer">cryptographically signed</a></u> with the explicit list of capabilities it can use (effects it can produce).</p><p>Ultimately what we've done is provided a means to maintain portable function purity in WebAssembly modules while allowing for all algebraic effects to not only be testable, but distributed, hot-swappable, and dynamically scalable across a flat topology system comprised of multiple disparate environments.</p><p>If you're interested in learning more about capabilities and seeing them in action, take a look at our <u><a href="https://github.com/wasmcloud/examples/" target="_blank" rel="noopener noreferrer">examples</a></u> repository.</p>]]></content>
        <author>
            <name>Kevin Hoffman</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deploying wasmCloud Actors from Github Packages]]></title>
        <id>2022-05-23_ghcr-actions</id>
        <link href="https://wasmcloud.com/blog/2022-05-23_ghcr-actions"/>
        <updated>2022-05-23T13:00:00.000Z</updated>
        <summary type="html"><![CDATA[Simplifying the deployment experience for WebAssembly modules.]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="github-packages-logo" src="/assets/images/github-packages-a2ea3a52ed3e00db8f2f7291888cafaa.png" width="1203" height="633" class="img_ev3q"></p><p>With the general availability of GitHub Packages container registry, or GHCR for short, an easily accessible Docker registry made its way into the same platform many developers use for version control today. This was great news for containers and simplifying infrastructure, just like Actions greatly simplified workflows on GitHub.</p><p>But wait, there's more!</p><p>GitHub container registry also supports the Open Container Initiative (OCI) specification, which doesn't limit "containers" to just Docker containers, and it supports public anonymous downloads! This makes GHCR a perfect target for hosting OCI-compliant artifacts, like wasmCloud actors and capability providers. Today, we're going to walk through evolving use cases for getting more power out of this feature of GitHub and how it can simplify your wasmCloud development beyond running on your local machine.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="prerequisites">Prerequisites<a class="hash-link" href="#prerequisites" title="Direct link to heading">​</a></h2><p>Today we'll be using a couple of tools for this tutorial:</p><ul><li>A <u><a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">Rust</a></u> toolchain to build actors<ul><li>Make sure to add wasm32 as a target with <code>rustup target add wasm32-unknown-unknown</code></li></ul></li><li>.<u><a href="https://wasmcloud.dev/overview/installation/#install-wash" target="_blank" rel="noopener noreferrer">wash</a></u>, the wasmCloud shell, at least <code>v0.11.0</code></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="pushing-an-actor-to-github-packages">Pushing an actor to GitHub packages<a class="hash-link" href="#pushing-an-actor-to-github-packages" title="Direct link to heading">​</a></h2><p>To start, let's go ahead and generate a new wasmCloud actor project from the <code>hello</code> project template. This is our "hello world" actor.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wash new actor hello</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Once the project is generated, <code>cd hello</code> into the project. There, you can run <code>cargo build --release</code> build your actor module. The last step before we can push it to GitHub is to <u><a href="https://wasmcloud.dev/app-dev/std-caps/#sign-the-actor" target="_blank" rel="noopener noreferrer">sign</a></u> the actor with embedded claims. The following command will sign your actor and allow it to access the HTTPServer capability:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wash claims sign target/wasm32-unknown-unknown/release/hello.wasm --http_server --name Hello</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>By default this will place the actor under the same directory with a <code>_s</code> suffix, and you can verify this worked properly by running:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wash claims inspect target/wasm32-unknown-unknown/release/hello_s.wasm</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Your output should be something like this, just with different <code>Account</code> and <code>Module</code> keys</p><div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">                              Hello - Module</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Account       ABYFZKXEHQWJIMBKVAVG3Y5LGEBT3MQXRYVTQBF7RVHUIG62LUK3N5EQ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Module        MAMP52XKSBHNDMWK4OR4BZVBDQNNZQ5FXDXUAX7KIT7KNOKK2N3CCLZ2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Expires                                                          never</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Can Be Used                                                immediately</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Version                                                       None (0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Call Alias                                                   (Not set)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                               Capabilities</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  HTTP Server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                   Tags</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  None</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now that we've built and signed your actor, let's push it to GitHub! To do this, you'll need a <u><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token" target="_blank" rel="noopener noreferrer">personal access token</a></u> with the <code>write:packages</code> capability. Refer to the link for instructions on how to create this personal access token, and feel free to tweak the other parameters to your liking.</p><p><img loading="lazy" src="/assets/images/new-pat-decf93e4c9d618db626b80586bb8a90e.png" width="1720" height="1392" class="img_ev3q"></p><p>Once created, copy this token and store it in a safe place before moving back to your terminal.</p><p><img loading="lazy" src="/assets/images/pat-created-9cc806bae6e55bbd45e53aa941378c6c.png" width="1732" height="502" class="img_ev3q"></p><p>Now, time to push! We'll use <code>wash</code> here along with some environment variables. <code>WASH_REG_USER</code> should be set to your GitHub username, and <code>WASH_REG_PASSWORD</code> should be set to your GitHub personal access token that you created before, starting with <code>ghp_</code></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">WASH_REG_USER</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">your_github_username</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">WASH_REG_PASSWORD</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">your_gitub_personal_access_token</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wash reg push ghcr.io/</span><span class="token variable" style="color:#36acaa">$WASH_REG_USER</span><span class="token plain">/hello:0.1.0 target/wasm32-unknown-unknown/release/hello_s.wasm</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You should see output like the following:</p><div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wash reg push ghcr.io/$WASH_REG_USER/hello:0.1.0 target/wasm32-unknown-unknown/release/hello_s.wasm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">🚿 Successfully validated and pushed to ghcr.io/brooksmtownsend/hello:0.1.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now, you can navigate to your GitHub profile and access the <code>Packages</code> tab to see your <code>hello</code> actor.</p><p><img loading="lazy" src="/assets/images/package-21622403a62a48bd805ec847e43e7da6.png" width="2056" height="574" class="img_ev3q"></p><p>By default, our actor package is private so that it cannot be downloaded anonymously. Any wasmCloud host can be configured with a username and password for registry authentication, and in this case you can supply your GitHub username and personal access token to authenticate and download your actor. However, this step can be missed easily, so let's make this actor package public so you can start it anywhere. Click on your package, then on the "<a href="https://emojipedia.org/gear/" target="_blank" rel="noopener noreferrer">⚙️</a> Package Settings" sidebar. From there, scroll to the bottom and "Change visibility" to public.</p><p><img loading="lazy" src="/assets/images/change-visibility-ec2677df4d134329e9fd44b43ada1f11.png" width="988" height="782" class="img_ev3q"></p><p>Now you can download and run that actor on any wasmCloud host, which can be on Mac, Linux, Windows, or even in a browser tab! You can test connectivity at any time by running:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wash claims inspect ghcr.io/</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">your_github_username</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">/hello:0.1.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="continuous-integration-with-a-github-repository">Continuous integration with a GitHub repository<a class="hash-link" href="#continuous-integration-with-a-github-repository" title="Direct link to heading">​</a></h2><p>Now that we have a Package set up for our actor, the next step is to connect it to a repository. Once we do that we can take advantage of the built-in Actions that are provided with an actor project to automatically build, test, and release actors.</p><p>First step is to create a GitHub repository. For simplicity, let's call it <code>hello</code> to match the actor name.</p><p><img loading="lazy" src="/assets/images/create-repo-fda05baf6274b48407e55d6f24763419.png" width="1604" height="1628" class="img_ev3q"></p><p>Once that's created, we need to associate our local actor project with the GitHub repository. <code>cd hello</code> into your actor project if you haven't already, and then:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> </span><span class="token builtin class-name">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> commit -m </span><span class="token string" style="color:#e3116c">"initial commit"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> branch -M main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># If you named your repository something else, simply replace the URL below</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> remote </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> origin https://github.com/</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">your_github_name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">/hello.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push -u origin main</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>For every commit after this one, and every pull request into <code>main</code> , your actor will be automatically built, checked for formatting, lints, and tested once you add unit tests and uncomment the <code>cargo test</code> step in <code>.github/workflows/build.yml</code>.</p><p>For the <code>.github/workflows/release.yml</code> action, we need to configure three repository secrets to properly sign and release your actor. The good news is, we already have all of these secrets, we just need to plop them in GitHub!</p><p><img loading="lazy" src="/assets/images/repo-secrets-0bfb27c1410e8fc88645b31b25a985d4.png" width="2680" height="1458" class="img_ev3q"></p><p>Under your repository settings, head to the <code>Secrets</code> dropdown and click <code>Actions</code> . Here we can configure the following secrets for use in this repository.</p><table><thead><tr><th><strong>name</strong></th><th><strong>value</strong></th></tr></thead><tbody><tr><td>WASH_ISSUER_KEY</td><td>Can be found under <code>$HOME/.wash/keys</code> with the form of <code>&lt;your_username&gt;_account.nk</code>. Copy the contents of this file, a 56 character <u><a href="https://docs.nats.io/running-a-nats-service/configuration/securing_nats/auth_intro/nkey_auth" target="_blank" rel="noopener noreferrer">NKey</a></u> starting with <code>SA</code>, into the value section.</td></tr><tr><td>WASH_SUBJECT_KEY</td><td>Can be found under <code>$HOME/.wash/keys/hello_module.nk</code>. Copy the contents of this file, a 56 character <u><a href="https://docs.nats.io/running-a-nats-service/configuration/securing_nats/auth_intro/nkey_auth" target="_blank" rel="noopener noreferrer">NKey</a></u> starting with <code>SM</code>, into the value section.</td></tr><tr><td>WASMCLOUD_PAT</td><td>Your personal access token that you previously used for <code>WASH_REG_PASSWORD</code></td></tr></tbody></table><p><img loading="lazy" src="/assets/images/required-secrets-d314cf96d604bb5d9c491ec86c9f4291.png" width="1712" height="538" class="img_ev3q"></p><p>Once these three secrets are configured, let's cut our first release of the <code>hello</code> actor. Head back to your command line and create a tag for <code>v0.1.0</code> and push it to <code>main</code></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> tag -a v0.1.0 -m </span><span class="token string" style="color:#e3116c">"initial release for hello actor"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push -u origin v0.1.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This will automatically kick off the release action, which includes building and testing the actor just like the build action, and after a few minutes you'll see a new GitHub release created with the OCI URL for the actor and claims information, as well as the <code>hello</code> package associated with this repo.</p><p><img loading="lazy" src="/assets/images/release-b19d34e08b6c7f78f1e96906eaf1d865.png" width="2844" height="1878" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrap-up">Wrap up<a class="hash-link" href="#wrap-up" title="Direct link to heading">​</a></h2><p>Today we walked through the setup process to configure a GitHub repository to automatically build, test, and release wasmCloud actors to GitHub Packages. You can continue to add to these base workflow templates to include your own custom checks as well.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's next?<a class="hash-link" href="#whats-next" title="Direct link to heading">​</a></h2><p>Now that your <code>hello</code> actor is published to a public OCI registry, you can follow our <u><a href="https://wasmcloud.dev/app-dev/create-actor/run/" target="_blank" rel="noopener noreferrer">run actor</a></u> tutorial with the OCI reference instead of uploading a local file. If you're new to wasmCloud, check out our documentation for helpful information about <u><a href="https://wasmcloud.dev/reference/host-runtime/actors/" target="_blank" rel="noopener noreferrer">actors</a></u>, our <u><a href="https://wasmcloud.dev/reference/host-runtime/security/" target="_blank" rel="noopener noreferrer">security model</a></u>, and more. Feedback on this process is welcome and encouraged on our <u><a href="https://github.com/wasmcloud/project-templates" target="_blank" rel="noopener noreferrer">project-templates</a></u> repo; and to stay involved you can join our <u><a href="https://slack.wasmcloud.com/" target="_blank" rel="noopener noreferrer">slack</a></u>.</p>]]></content>
        <author>
            <name>Brooks Townsend</name>
        </author>
    </entry>
</feed>